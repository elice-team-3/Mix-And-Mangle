/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Mix&Mingle API
 * 
Mix&Mingle API Server

 * OpenAPI spec version: 0.6.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import type {
  HTTPValidationError
} from '../api.schemas'
import { customInstance } from '../../utils/axios';
import type { ErrorType } from '../../utils/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary 소켓 테스트
 */
export const apiStaticGet = (
    
 options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: '/api/static', method: 'GET', signal
    },
      options);
    }
  

export const getApiStaticGetQueryKey = () => {
    return ['/api/static'] as const;
    }

    
export const getApiStaticGetQueryOptions = <TData = Awaited<ReturnType<typeof apiStaticGet>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiStaticGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiStaticGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiStaticGet>>> = ({ signal }) => apiStaticGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiStaticGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiStaticGetQueryResult = NonNullable<Awaited<ReturnType<typeof apiStaticGet>>>
export type ApiStaticGetQueryError = ErrorType<unknown>


export function useApiStaticGet<TData = Awaited<ReturnType<typeof apiStaticGet>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiStaticGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiStaticGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiStaticGet<TData = Awaited<ReturnType<typeof apiStaticGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiStaticGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiStaticGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiStaticGet<TData = Awaited<ReturnType<typeof apiStaticGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiStaticGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 소켓 테스트
 */

export function useApiStaticGet<TData = Awaited<ReturnType<typeof apiStaticGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiStaticGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiStaticGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiStaticGetSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof apiStaticGet>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiStaticGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiStaticGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiStaticGet>>> = ({ signal }) => apiStaticGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiStaticGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiStaticGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof apiStaticGet>>>
export type ApiStaticGetSuspenseQueryError = ErrorType<unknown>


export function useApiStaticGetSuspense<TData = Awaited<ReturnType<typeof apiStaticGet>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiStaticGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiStaticGetSuspense<TData = Awaited<ReturnType<typeof apiStaticGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiStaticGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiStaticGetSuspense<TData = Awaited<ReturnType<typeof apiStaticGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiStaticGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 소켓 테스트
 */

export function useApiStaticGetSuspense<TData = Awaited<ReturnType<typeof apiStaticGet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiStaticGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiStaticGetSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 이벤트를 시작하는 메시지를 보냅니다.
socket을 통해 event_id에 해당하는 room에
'event.start' event를 발생시킵니다.
 * @summary 이벤트 시작
 */
export const apiEventEventIdStartGet = (
    eventId: number,
 options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/event/${eventId}/start`, method: 'GET', signal
    },
      options);
    }
  

export const getApiEventEventIdStartGetQueryKey = (eventId: number,) => {
    return [`/api/event/${eventId}/start`] as const;
    }

    
export const getApiEventEventIdStartGetQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdStartGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdStartGet>>> = ({ signal }) => apiEventEventIdStartGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdStartGetQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdStartGet>>>
export type ApiEventEventIdStartGetQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdStartGet<TData = Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdStartGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdStartGet<TData = Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdStartGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdStartGet<TData = Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 이벤트 시작
 */

export function useApiEventEventIdStartGet<TData = Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdStartGetQueryOptions(eventId, options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiEventEventIdStartGetSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdStartGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdStartGet>>> = ({ signal }) => apiEventEventIdStartGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdStartGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdStartGet>>>
export type ApiEventEventIdStartGetSuspenseQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdStartGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdStartGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdStartGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 이벤트 시작
 */

export function useApiEventEventIdStartGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdStartGetSuspenseQueryOptions(eventId, options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 퀴즈를 시작하는 메시지를 보냅니다.
socket을 통해 event_id에 해당하는 room에
'quiz.start' event를 발생시킵니다.
 * @summary 퀴즈 시작
 */
export const apiEventEventIdStartQuizGet = (
    eventId: number,
 options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/event/${eventId}/start-quiz`, method: 'GET', signal
    },
      options);
    }
  

export const getApiEventEventIdStartQuizGetQueryKey = (eventId: number,) => {
    return [`/api/event/${eventId}/start-quiz`] as const;
    }

    
export const getApiEventEventIdStartQuizGetQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdStartQuizGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>> = ({ signal }) => apiEventEventIdStartQuizGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdStartQuizGetQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>>
export type ApiEventEventIdStartQuizGetQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdStartQuizGet<TData = Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdStartQuizGet<TData = Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdStartQuizGet<TData = Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 퀴즈 시작
 */

export function useApiEventEventIdStartQuizGet<TData = Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdStartQuizGetQueryOptions(eventId, options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiEventEventIdStartQuizGetSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdStartQuizGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>> = ({ signal }) => apiEventEventIdStartQuizGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdStartQuizGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>>
export type ApiEventEventIdStartQuizGetSuspenseQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdStartQuizGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdStartQuizGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdStartQuizGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 퀴즈 시작
 */

export function useApiEventEventIdStartQuizGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartQuizGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdStartQuizGetSuspenseQueryOptions(eventId, options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 네트워킹을 준비하는 메시지를 보냅니다.
socket을 통해 event_id에 해당하는 room에
'networking.prepare' event를 발생시킵니다.
 * @summary 네트워킹 준비
 */
export const apiEventEventIdNetworkingPrepareGet = (
    eventId: number,
 options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/event/${eventId}/networking-prepare`, method: 'GET', signal
    },
      options);
    }
  

export const getApiEventEventIdNetworkingPrepareGetQueryKey = (eventId: number,) => {
    return [`/api/event/${eventId}/networking-prepare`] as const;
    }

    
export const getApiEventEventIdNetworkingPrepareGetQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdNetworkingPrepareGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>> = ({ signal }) => apiEventEventIdNetworkingPrepareGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdNetworkingPrepareGetQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>>
export type ApiEventEventIdNetworkingPrepareGetQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdNetworkingPrepareGet<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdNetworkingPrepareGet<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdNetworkingPrepareGet<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 네트워킹 준비
 */

export function useApiEventEventIdNetworkingPrepareGet<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdNetworkingPrepareGetQueryOptions(eventId, options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiEventEventIdNetworkingPrepareGetSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdNetworkingPrepareGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>> = ({ signal }) => apiEventEventIdNetworkingPrepareGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdNetworkingPrepareGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>>
export type ApiEventEventIdNetworkingPrepareGetSuspenseQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdNetworkingPrepareGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdNetworkingPrepareGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdNetworkingPrepareGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 네트워킹 준비
 */

export function useApiEventEventIdNetworkingPrepareGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdNetworkingPrepareGetSuspenseQueryOptions(eventId, options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 네트워킹 그룹을 준비하는 메시지를 보냅니다.
socket을 통해 event_id에 해당하는 room에
'networking.group.prepare' event를 발생시킵니다.
 * @summary 네트워킹 그룹 준비
 */
export const apiEventEventIdNetworkingGroupPrepareGet = (
    eventId: number,
 options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/event/${eventId}/networking-group-prepare`, method: 'GET', signal
    },
      options);
    }
  

export const getApiEventEventIdNetworkingGroupPrepareGetQueryKey = (eventId: number,) => {
    return [`/api/event/${eventId}/networking-group-prepare`] as const;
    }

    
export const getApiEventEventIdNetworkingGroupPrepareGetQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdNetworkingGroupPrepareGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>> = ({ signal }) => apiEventEventIdNetworkingGroupPrepareGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdNetworkingGroupPrepareGetQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>>
export type ApiEventEventIdNetworkingGroupPrepareGetQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdNetworkingGroupPrepareGet<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdNetworkingGroupPrepareGet<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdNetworkingGroupPrepareGet<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 네트워킹 그룹 준비
 */

export function useApiEventEventIdNetworkingGroupPrepareGet<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdNetworkingGroupPrepareGetQueryOptions(eventId, options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiEventEventIdNetworkingGroupPrepareGetSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdNetworkingGroupPrepareGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>> = ({ signal }) => apiEventEventIdNetworkingGroupPrepareGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdNetworkingGroupPrepareGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>>
export type ApiEventEventIdNetworkingGroupPrepareGetSuspenseQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdNetworkingGroupPrepareGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdNetworkingGroupPrepareGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdNetworkingGroupPrepareGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 네트워킹 그룹 준비
 */

export function useApiEventEventIdNetworkingGroupPrepareGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingGroupPrepareGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdNetworkingGroupPrepareGetSuspenseQueryOptions(eventId, options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 네트워킹을 시작하는 메시지를 보냅니다.
socket을 통해 event_id에 해당하는 room에
'networking.start' event를 발생시킵니다.
 * @summary 네트워킹 시작
 */
export const apiEventEventIdStartNetworkingGet = (
    eventId: number,
 options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/event/${eventId}/start-networking`, method: 'GET', signal
    },
      options);
    }
  

export const getApiEventEventIdStartNetworkingGetQueryKey = (eventId: number,) => {
    return [`/api/event/${eventId}/start-networking`] as const;
    }

    
export const getApiEventEventIdStartNetworkingGetQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdStartNetworkingGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>> = ({ signal }) => apiEventEventIdStartNetworkingGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdStartNetworkingGetQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>>
export type ApiEventEventIdStartNetworkingGetQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdStartNetworkingGet<TData = Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdStartNetworkingGet<TData = Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdStartNetworkingGet<TData = Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 네트워킹 시작
 */

export function useApiEventEventIdStartNetworkingGet<TData = Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdStartNetworkingGetQueryOptions(eventId, options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiEventEventIdStartNetworkingGetSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdStartNetworkingGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>> = ({ signal }) => apiEventEventIdStartNetworkingGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdStartNetworkingGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>>
export type ApiEventEventIdStartNetworkingGetSuspenseQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdStartNetworkingGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdStartNetworkingGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdStartNetworkingGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 네트워킹 시작
 */

export function useApiEventEventIdStartNetworkingGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdStartNetworkingGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdStartNetworkingGetSuspenseQueryOptions(eventId, options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 네트워킹 대화 주제를 생성하는 메시지를 보냅니다.
 * @summary 네트워킹 대화 주제 생성
 */
export const apiEventEventIdTopicGenerateGet = (
    eventId: number,
 options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/event/${eventId}/topic-generate`, method: 'GET', signal
    },
      options);
    }
  

export const getApiEventEventIdTopicGenerateGetQueryKey = (eventId: number,) => {
    return [`/api/event/${eventId}/topic-generate`] as const;
    }

    
export const getApiEventEventIdTopicGenerateGetQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdTopicGenerateGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>> = ({ signal }) => apiEventEventIdTopicGenerateGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdTopicGenerateGetQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>>
export type ApiEventEventIdTopicGenerateGetQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdTopicGenerateGet<TData = Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdTopicGenerateGet<TData = Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdTopicGenerateGet<TData = Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 네트워킹 대화 주제 생성
 */

export function useApiEventEventIdTopicGenerateGet<TData = Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdTopicGenerateGetQueryOptions(eventId, options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiEventEventIdTopicGenerateGetSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdTopicGenerateGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>> = ({ signal }) => apiEventEventIdTopicGenerateGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdTopicGenerateGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>>
export type ApiEventEventIdTopicGenerateGetSuspenseQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdTopicGenerateGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdTopicGenerateGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdTopicGenerateGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 네트워킹 대화 주제 생성
 */

export function useApiEventEventIdTopicGenerateGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdTopicGenerateGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdTopicGenerateGetSuspenseQueryOptions(eventId, options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 타이머를 시작하는 메시지를 보냅니다.
socket을 통해 event_id에 해당하는 room에
'timer.start', 'timer.stop', timer.reset event를 발생시킵니다.
 * @summary 타이머 시작
 */
export const apiEventEventIdTimerActionPut = (
    eventId: number,
    action: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<unknown>(
      {url: `/api/event/${eventId}/timer/${action}`, method: 'PUT'
    },
      options);
    }
  


export const getApiEventEventIdTimerActionPutMutationOptions = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiEventEventIdTimerActionPut>>, TError, {eventId: number;action: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof apiEventEventIdTimerActionPut>>, TError, {eventId: number;action: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiEventEventIdTimerActionPut>>, {eventId: number;action: string}> = (props) => {
          const {eventId, action} = props ?? {};

          return  apiEventEventIdTimerActionPut(eventId, action, requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiEventEventIdTimerActionPutMutationResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdTimerActionPut>>>
    
    export type ApiEventEventIdTimerActionPutMutationError = ErrorType<HTTPValidationError>

    /**
 * @summary 타이머 시작
 */
export const useApiEventEventIdTimerActionPut = <TError = ErrorType<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiEventEventIdTimerActionPut>>, TError, {eventId: number;action: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof apiEventEventIdTimerActionPut>>,
        TError,
        {eventId: number;action: string},
        TContext
      > => {

      const mutationOptions = getApiEventEventIdTimerActionPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * 네트워킹을 종료하는 메시지를 보냅니다.
socket을 통해 event_id에 해당하는 room에
'networking.end' event를 발생시킵니다.
 * @summary 네트워킹 종료
 */
export const apiEventEventIdNetworkingEndGet = (
    eventId: number,
 options?: SecondParameter<typeof customInstance>, signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/event/${eventId}/networking-end`, method: 'GET', signal
    },
      options);
    }
  

export const getApiEventEventIdNetworkingEndGetQueryKey = (eventId: number,) => {
    return [`/api/event/${eventId}/networking-end`] as const;
    }

    
export const getApiEventEventIdNetworkingEndGetQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdNetworkingEndGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>> = ({ signal }) => apiEventEventIdNetworkingEndGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(eventId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdNetworkingEndGetQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>>
export type ApiEventEventIdNetworkingEndGetQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdNetworkingEndGet<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdNetworkingEndGet<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>,
          TError,
          TData
        >, 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdNetworkingEndGet<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 네트워킹 종료
 */

export function useApiEventEventIdNetworkingEndGet<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdNetworkingEndGetQueryOptions(eventId, options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiEventEventIdNetworkingEndGetSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError = ErrorType<HTTPValidationError>>(eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiEventEventIdNetworkingEndGetQueryKey(eventId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>> = ({ signal }) => apiEventEventIdNetworkingEndGet(eventId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventEventIdNetworkingEndGetSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>>
export type ApiEventEventIdNetworkingEndGetSuspenseQueryError = ErrorType<HTTPValidationError>


export function useApiEventEventIdNetworkingEndGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdNetworkingEndGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventEventIdNetworkingEndGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary 네트워킹 종료
 */

export function useApiEventEventIdNetworkingEndGetSuspense<TData = Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError = ErrorType<HTTPValidationError>>(
 eventId: number, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof apiEventEventIdNetworkingEndGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getApiEventEventIdNetworkingEndGetSuspenseQueryOptions(eventId, options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



