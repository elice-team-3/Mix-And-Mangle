/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Mix&Mingle API
 * 
Mix&Mingle API Server

 * OpenAPI spec version: 0.6.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query'

import type {
  AIApiEventsEventIdAiGrouppingPost200,
  EventCreateRequest,
  EventGroupingRequest,
  EventResponse,
  EventUpdateRequest,
  HTTPValidationError,
  QuizBulkCreateSchema,
} from '../api.schemas'
import { customInstance } from '../../utils/axios'
import type { ErrorType, BodyType } from '../../utils/axios'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * Ïù¥Î≤§Ìä∏ Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï°∞Ìöå
 */
export const apiEventsGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventResponse[]>(
    { url: '/api/events', method: 'GET', signal },
    options,
  )
}

export const getApiEventsGetQueryKey = () => {
  return ['/api/events'] as const
}

export const getApiEventsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof apiEventsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiEventsGet>>, TError, TData>
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiEventsGetQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventsGet>>> = ({
    signal,
  }) => apiEventsGet(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiEventsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiEventsGet>>
>
export type ApiEventsGetQueryError = ErrorType<unknown>

export function useApiEventsGet<
  TData = Awaited<ReturnType<typeof apiEventsGet>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiEventsGet>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof apiEventsGet>>,
        TError,
        TData
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customInstance>
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useApiEventsGet<
  TData = Awaited<ReturnType<typeof apiEventsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiEventsGet>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof apiEventsGet>>,
        TError,
        TData
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventsGet<
  TData = Awaited<ReturnType<typeof apiEventsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiEventsGet>>, TError, TData>
  >
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï°∞Ìöå
 */

export function useApiEventsGet<
  TData = Awaited<ReturnType<typeof apiEventsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiEventsGet>>, TError, TData>
  >
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getApiEventsGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getApiEventsGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof apiEventsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof apiEventsGet>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiEventsGetQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiEventsGet>>> = ({
    signal,
  }) => apiEventsGet(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof apiEventsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventsGetSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiEventsGet>>
>
export type ApiEventsGetSuspenseQueryError = ErrorType<unknown>

export function useApiEventsGetSuspense<
  TData = Awaited<ReturnType<typeof apiEventsGet>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof apiEventsGet>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useApiEventsGetSuspense<
  TData = Awaited<ReturnType<typeof apiEventsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof apiEventsGet>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useApiEventsGetSuspense<
  TData = Awaited<ReturnType<typeof apiEventsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof apiEventsGet>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
/**
 * @summary Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï°∞Ìöå
 */

export function useApiEventsGetSuspense<
  TData = Awaited<ReturnType<typeof apiEventsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof apiEventsGet>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
} {
  const queryOptions = getApiEventsGetSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Ïù¥Î≤§Ìä∏Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * @summary Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±
 */
export const apiEventsPost = (
  eventCreateRequest: BodyType<EventCreateRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventResponse>(
    {
      url: '/api/events',
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: eventCreateRequest,
      signal,
    },
    options,
  )
}

export const getApiEventsPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiEventsPost>>,
    TError,
    { data: BodyType<EventCreateRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiEventsPost>>,
  TError,
  { data: BodyType<EventCreateRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiEventsPost>>,
    { data: BodyType<EventCreateRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return apiEventsPost(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ApiEventsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiEventsPost>>
>
export type ApiEventsPostMutationBody = BodyType<EventCreateRequest>
export type ApiEventsPostMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±
 */
export const useApiEventsPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiEventsPost>>,
    TError,
    { data: BodyType<EventCreateRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof apiEventsPost>>,
  TError,
  { data: BodyType<EventCreateRequest> },
  TContext
> => {
  const mutationOptions = getApiEventsPostMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Ïù¥Î≤§Ìä∏Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Ïù¥Î≤§Ìä∏ Ï°∞Ìöå
 */
export const apiEventsEventIdGet = (
  eventId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<EventResponse>(
    { url: `/api/events/${eventId}`, method: 'GET', signal },
    options,
  )
}

export const getApiEventsEventIdGetQueryKey = (eventId: number) => {
  return [`/api/events/${eventId}`] as const
}

export const getApiEventsEventIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof apiEventsEventIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiEventsEventIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getApiEventsEventIdGetQueryKey(eventId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiEventsEventIdGet>>
  > = ({ signal }) => apiEventsEventIdGet(eventId, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!eventId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof apiEventsEventIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventsEventIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiEventsEventIdGet>>
>
export type ApiEventsEventIdGetQueryError = ErrorType<HTTPValidationError>

export function useApiEventsEventIdGet<
  TData = Awaited<ReturnType<typeof apiEventsEventIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiEventsEventIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventsEventIdGet>>,
          TError,
          TData
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventsEventIdGet<
  TData = Awaited<ReturnType<typeof apiEventsEventIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiEventsEventIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiEventsEventIdGet>>,
          TError,
          TData
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiEventsEventIdGet<
  TData = Awaited<ReturnType<typeof apiEventsEventIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiEventsEventIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥Î≤§Ìä∏ Ï°∞Ìöå
 */

export function useApiEventsEventIdGet<
  TData = Awaited<ReturnType<typeof apiEventsEventIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiEventsEventIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getApiEventsEventIdGetQueryOptions(eventId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getApiEventsEventIdGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof apiEventsEventIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof apiEventsEventIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getApiEventsEventIdGetQueryKey(eventId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiEventsEventIdGet>>
  > = ({ signal }) => apiEventsEventIdGet(eventId, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof apiEventsEventIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiEventsEventIdGetSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiEventsEventIdGet>>
>
export type ApiEventsEventIdGetSuspenseQueryError =
  ErrorType<HTTPValidationError>

export function useApiEventsEventIdGetSuspense<
  TData = Awaited<ReturnType<typeof apiEventsEventIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof apiEventsEventIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useApiEventsEventIdGetSuspense<
  TData = Awaited<ReturnType<typeof apiEventsEventIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof apiEventsEventIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useApiEventsEventIdGetSuspense<
  TData = Awaited<ReturnType<typeof apiEventsEventIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof apiEventsEventIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
/**
 * @summary Ïù¥Î≤§Ìä∏ Ï°∞Ìöå
 */

export function useApiEventsEventIdGetSuspense<
  TData = Awaited<ReturnType<typeof apiEventsEventIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof apiEventsEventIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
} {
  const queryOptions = getApiEventsEventIdGetSuspenseQueryOptions(
    eventId,
    options,
  )

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Ïù¥Î≤§Ìä∏Î•º ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary Ïù¥Î≤§Ìä∏ ÏàòÏ†ï
 */
export const apiEventsEventIdPut = (
  eventId: number,
  eventUpdateRequest: BodyType<EventUpdateRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<EventResponse>(
    {
      url: `/api/events/${eventId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: eventUpdateRequest,
    },
    options,
  )
}

export const getApiEventsEventIdPutMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiEventsEventIdPut>>,
    TError,
    { eventId: number; data: BodyType<EventUpdateRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiEventsEventIdPut>>,
  TError,
  { eventId: number; data: BodyType<EventUpdateRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiEventsEventIdPut>>,
    { eventId: number; data: BodyType<EventUpdateRequest> }
  > = (props) => {
    const { eventId, data } = props ?? {}

    return apiEventsEventIdPut(eventId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ApiEventsEventIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiEventsEventIdPut>>
>
export type ApiEventsEventIdPutMutationBody = BodyType<EventUpdateRequest>
export type ApiEventsEventIdPutMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Ïù¥Î≤§Ìä∏ ÏàòÏ†ï
 */
export const useApiEventsEventIdPut = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiEventsEventIdPut>>,
    TError,
    { eventId: number; data: BodyType<EventUpdateRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof apiEventsEventIdPut>>,
  TError,
  { eventId: number; data: BodyType<EventUpdateRequest> },
  TContext
> => {
  const mutationOptions = getApiEventsEventIdPutMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Ïù¥Î≤§Ìä∏Î•º ÏÇ≠Ï†úÌï©ÎãàÎã§.
 * @summary Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú
 */
export const apiEventsEventIdDelete = (
  eventId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/events/${eventId}`, method: 'DELETE' },
    options,
  )
}

export const getApiEventsEventIdDeleteMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiEventsEventIdDelete>>,
    TError,
    { eventId: number },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiEventsEventIdDelete>>,
  TError,
  { eventId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiEventsEventIdDelete>>,
    { eventId: number }
  > = (props) => {
    const { eventId } = props ?? {}

    return apiEventsEventIdDelete(eventId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ApiEventsEventIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiEventsEventIdDelete>>
>

export type ApiEventsEventIdDeleteMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Ïù¥Î≤§Ìä∏ ÏÇ≠Ï†ú
 */
export const useApiEventsEventIdDelete = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiEventsEventIdDelete>>,
    TError,
    { eventId: number },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof apiEventsEventIdDelete>>,
  TError,
  { eventId: number },
  TContext
> => {
  const mutationOptions = getApiEventsEventIdDeleteMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Ïù¥Î≤§Ìä∏Ïóê ÏÜçÌïú Ï∞∏Ïó¨ÏûêÎ•º AIÎ°ú Í∑∏Î£πÌïëÌï©ÎãàÎã§.
 * @summary Ïù¥Î≤§Ìä∏ Ai Í∑∏Î£πÌïë
 */
export const aIApiEventsEventIdAiGrouppingPost = (
  eventId: number,
  eventGroupingRequest: BodyType<EventGroupingRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<AIApiEventsEventIdAiGrouppingPost200>(
    {
      url: `/api/events/${eventId}/ai_groupping`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: eventGroupingRequest,
      signal,
    },
    options,
  )
}

export const getAIApiEventsEventIdAiGrouppingPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof aIApiEventsEventIdAiGrouppingPost>>,
    TError,
    { eventId: number; data: BodyType<EventGroupingRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof aIApiEventsEventIdAiGrouppingPost>>,
  TError,
  { eventId: number; data: BodyType<EventGroupingRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof aIApiEventsEventIdAiGrouppingPost>>,
    { eventId: number; data: BodyType<EventGroupingRequest> }
  > = (props) => {
    const { eventId, data } = props ?? {}

    return aIApiEventsEventIdAiGrouppingPost(eventId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AIApiEventsEventIdAiGrouppingPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof aIApiEventsEventIdAiGrouppingPost>>
>
export type AIApiEventsEventIdAiGrouppingPostMutationBody =
  BodyType<EventGroupingRequest>
export type AIApiEventsEventIdAiGrouppingPostMutationError =
  ErrorType<HTTPValidationError>

/**
 * @summary Ïù¥Î≤§Ìä∏ Ai Í∑∏Î£πÌïë
 */
export const useAIApiEventsEventIdAiGrouppingPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof aIApiEventsEventIdAiGrouppingPost>>,
    TError,
    { eventId: number; data: BodyType<EventGroupingRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof aIApiEventsEventIdAiGrouppingPost>>,
  TError,
  { eventId: number; data: BodyType<EventGroupingRequest> },
  TContext
> => {
  const mutationOptions =
    getAIApiEventsEventIdAiGrouppingPostMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * Ïù¥Î≤§Ìä∏Ïóê Í¥ÄÎ†®Îêú ÌÄ¥Ï¶àÎ•º AIÎ•º ÌÜµÌï¥ ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * @summary Ïù¥Î≤§Ìä∏ ÌÄ¥Ï¶à Ai ÏÉùÏÑ±
 */
export const aIApiEventsEventIdAiQuizGet = (
  eventId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<QuizBulkCreateSchema>(
    { url: `/api/events/${eventId}/ai-quiz`, method: 'GET', signal },
    options,
  )
}

export const getAIApiEventsEventIdAiQuizGetQueryKey = (eventId: number) => {
  return [`/api/events/${eventId}/ai-quiz`] as const
}

export const getAIApiEventsEventIdAiQuizGetQueryOptions = <
  TData = Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getAIApiEventsEventIdAiQuizGetQueryKey(eventId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>
  > = ({ signal }) =>
    aIApiEventsEventIdAiQuizGet(eventId, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!eventId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type AIApiEventsEventIdAiQuizGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>
>
export type AIApiEventsEventIdAiQuizGetQueryError =
  ErrorType<HTTPValidationError>

export function useAIApiEventsEventIdAiQuizGet<
  TData = Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
          TError,
          TData
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAIApiEventsEventIdAiQuizGet<
  TData = Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
          TError,
          TData
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAIApiEventsEventIdAiQuizGet<
  TData = Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Ïù¥Î≤§Ìä∏ ÌÄ¥Ï¶à Ai ÏÉùÏÑ±
 */

export function useAIApiEventsEventIdAiQuizGet<
  TData = Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getAIApiEventsEventIdAiQuizGetQueryOptions(
    eventId,
    options,
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getAIApiEventsEventIdAiQuizGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getAIApiEventsEventIdAiQuizGetQueryKey(eventId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>
  > = ({ signal }) =>
    aIApiEventsEventIdAiQuizGet(eventId, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type AIApiEventsEventIdAiQuizGetSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>
>
export type AIApiEventsEventIdAiQuizGetSuspenseQueryError =
  ErrorType<HTTPValidationError>

export function useAIApiEventsEventIdAiQuizGetSuspense<
  TData = Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useAIApiEventsEventIdAiQuizGetSuspense<
  TData = Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useAIApiEventsEventIdAiQuizGetSuspense<
  TData = Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
/**
 * @summary Ïù¥Î≤§Ìä∏ ÌÄ¥Ï¶à Ai ÏÉùÏÑ±
 */

export function useAIApiEventsEventIdAiQuizGetSuspense<
  TData = Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  eventId: number,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof aIApiEventsEventIdAiQuizGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
} {
  const queryOptions = getAIApiEventsEventIdAiQuizGetSuspenseQueryOptions(
    eventId,
    options,
  )

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}
