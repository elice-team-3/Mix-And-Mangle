/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Mix&Mingle API
 * 
Mix&Mingle API Server

 * OpenAPI spec version: 0.3.0
 */
import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query'

import type {
  HTTPValidationError,
  UserCreateRequest,
  UserResponse,
  UserUpdateRequest,
} from '../api.schemas'
import { customInstance } from '../../utils/axios'
import type { ErrorType, BodyType } from '../../utils/axios'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * ÏÇ¨Ïö©Ïûê Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå
 */
export const apiUsersGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponse[]>(
    { url: '/api/users', method: 'GET', signal },
    options,
  )
}

export const getApiUsersGetQueryKey = () => {
  return ['/api/users'] as const
}

export const getApiUsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof apiUsersGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiUsersGet>>, TError, TData>
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiUsersGetQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiUsersGet>>> = ({
    signal,
  }) => apiUsersGet(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiUsersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiUsersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersGet>>
>
export type ApiUsersGetQueryError = ErrorType<unknown>

export function useApiUsersGet<
  TData = Awaited<ReturnType<typeof apiUsersGet>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiUsersGet>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof apiUsersGet>>,
        TError,
        TData
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customInstance>
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useApiUsersGet<
  TData = Awaited<ReturnType<typeof apiUsersGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiUsersGet>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof apiUsersGet>>,
        TError,
        TData
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiUsersGet<
  TData = Awaited<ReturnType<typeof apiUsersGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiUsersGet>>, TError, TData>
  >
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå
 */

export function useApiUsersGet<
  TData = Awaited<ReturnType<typeof apiUsersGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof apiUsersGet>>, TError, TData>
  >
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getApiUsersGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getApiUsersGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof apiUsersGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof apiUsersGet>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiUsersGetQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiUsersGet>>> = ({
    signal,
  }) => apiUsersGet(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof apiUsersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiUsersGetSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersGet>>
>
export type ApiUsersGetSuspenseQueryError = ErrorType<unknown>

export function useApiUsersGetSuspense<
  TData = Awaited<ReturnType<typeof apiUsersGet>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof apiUsersGet>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useApiUsersGetSuspense<
  TData = Awaited<ReturnType<typeof apiUsersGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof apiUsersGet>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useApiUsersGetSuspense<
  TData = Awaited<ReturnType<typeof apiUsersGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof apiUsersGet>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
/**
 * @summary ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå
 */

export function useApiUsersGetSuspense<
  TData = Awaited<ReturnType<typeof apiUsersGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof apiUsersGet>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
} {
  const queryOptions = getApiUsersGetSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ÏÇ¨Ïö©ÏûêÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±
 */
export const apiUsersPost = (
  userCreateRequest: BodyType<UserCreateRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponse>(
    {
      url: '/api/users',
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: userCreateRequest,
      signal,
    },
    options,
  )
}

export const getApiUsersPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiUsersPost>>,
    TError,
    { data: BodyType<UserCreateRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiUsersPost>>,
  TError,
  { data: BodyType<UserCreateRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiUsersPost>>,
    { data: BodyType<UserCreateRequest> }
  > = (props) => {
    const { data } = props ?? {}

    return apiUsersPost(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ApiUsersPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersPost>>
>
export type ApiUsersPostMutationBody = BodyType<UserCreateRequest>
export type ApiUsersPostMutationError = ErrorType<HTTPValidationError>

/**
 * @summary ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±
 */
export const useApiUsersPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiUsersPost>>,
    TError,
    { data: BodyType<UserCreateRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof apiUsersPost>>,
  TError,
  { data: BodyType<UserCreateRequest> },
  TContext
> => {
  const mutationOptions = getApiUsersPostMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ÏÇ¨Ïö©ÏûêÎ•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
 */
export const apiUsersUserIdGet = (
  userId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<UserResponse>(
    { url: `/api/users/${userId}`, method: 'GET', signal },
    options,
  )
}

export const getApiUsersUserIdGetQueryKey = (userId: string) => {
  return [`/api/users/${userId}`] as const
}

export const getApiUsersUserIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof apiUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiUsersUserIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getApiUsersUserIdGetQueryKey(userId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiUsersUserIdGet>>
  > = ({ signal }) => apiUsersUserIdGet(userId, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof apiUsersUserIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiUsersUserIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersUserIdGet>>
>
export type ApiUsersUserIdGetQueryError = ErrorType<HTTPValidationError>

export function useApiUsersUserIdGet<
  TData = Awaited<ReturnType<typeof apiUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiUsersUserIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiUsersUserIdGet>>,
          TError,
          TData
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiUsersUserIdGet<
  TData = Awaited<ReturnType<typeof apiUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiUsersUserIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiUsersUserIdGet>>,
          TError,
          TData
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useApiUsersUserIdGet<
  TData = Awaited<ReturnType<typeof apiUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiUsersUserIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
 */

export function useApiUsersUserIdGet<
  TData = Awaited<ReturnType<typeof apiUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiUsersUserIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getApiUsersUserIdGetQueryOptions(userId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getApiUsersUserIdGetSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof apiUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof apiUsersUserIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getApiUsersUserIdGetQueryKey(userId)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiUsersUserIdGet>>
  > = ({ signal }) => apiUsersUserIdGet(userId, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof apiUsersUserIdGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type ApiUsersUserIdGetSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersUserIdGet>>
>
export type ApiUsersUserIdGetSuspenseQueryError = ErrorType<HTTPValidationError>

export function useApiUsersUserIdGetSuspense<
  TData = Awaited<ReturnType<typeof apiUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof apiUsersUserIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useApiUsersUserIdGetSuspense<
  TData = Awaited<ReturnType<typeof apiUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof apiUsersUserIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
export function useApiUsersUserIdGetSuspense<
  TData = Awaited<ReturnType<typeof apiUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof apiUsersUserIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
}
/**
 * @summary ÏÇ¨Ïö©Ïûê Ï°∞Ìöå
 */

export function useApiUsersUserIdGetSuspense<
  TData = Awaited<ReturnType<typeof apiUsersUserIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  userId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof apiUsersUserIdGet>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>
} {
  const queryOptions = getApiUsersUserIdGetSuspenseQueryOptions(userId, options)

  const query = useSuspenseQuery(queryOptions) as UseSuspenseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê ÏàòÏ†ï
 */
export const apiUsersUserIdPut = (
  userId: string,
  userUpdateRequest: BodyType<UserUpdateRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserResponse>(
    {
      url: `/api/users/${userId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: userUpdateRequest,
    },
    options,
  )
}

export const getApiUsersUserIdPutMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiUsersUserIdPut>>,
    TError,
    { userId: string; data: BodyType<UserUpdateRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiUsersUserIdPut>>,
  TError,
  { userId: string; data: BodyType<UserUpdateRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiUsersUserIdPut>>,
    { userId: string; data: BodyType<UserUpdateRequest> }
  > = (props) => {
    const { userId, data } = props ?? {}

    return apiUsersUserIdPut(userId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ApiUsersUserIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersUserIdPut>>
>
export type ApiUsersUserIdPutMutationBody = BodyType<UserUpdateRequest>
export type ApiUsersUserIdPutMutationError = ErrorType<HTTPValidationError>

/**
 * @summary ÏÇ¨Ïö©Ïûê ÏàòÏ†ï
 */
export const useApiUsersUserIdPut = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiUsersUserIdPut>>,
    TError,
    { userId: string; data: BodyType<UserUpdateRequest> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof apiUsersUserIdPut>>,
  TError,
  { userId: string; data: BodyType<UserUpdateRequest> },
  TContext
> => {
  const mutationOptions = getApiUsersUserIdPutMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * ÏÇ¨Ïö©ÏûêÎ•º ÏÇ≠Ï†úÌï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê ÏÇ≠Ï†ú
 */
export const apiUsersUserIdDelete = (
  userId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/users/${userId}`, method: 'DELETE' },
    options,
  )
}

export const getApiUsersUserIdDeleteMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiUsersUserIdDelete>>,
    TError,
    { userId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof apiUsersUserIdDelete>>,
  TError,
  { userId: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiUsersUserIdDelete>>,
    { userId: string }
  > = (props) => {
    const { userId } = props ?? {}

    return apiUsersUserIdDelete(userId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ApiUsersUserIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersUserIdDelete>>
>

export type ApiUsersUserIdDeleteMutationError = ErrorType<HTTPValidationError>

/**
 * @summary ÏÇ¨Ïö©Ïûê ÏÇ≠Ï†ú
 */
export const useApiUsersUserIdDelete = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiUsersUserIdDelete>>,
    TError,
    { userId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof apiUsersUserIdDelete>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationOptions = getApiUsersUserIdDeleteMutationOptions(options)

  return useMutation(mutationOptions)
}
